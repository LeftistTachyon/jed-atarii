package jedatarii;

import java.awt.event.ActionEvent;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionListener;

public class ConsoleUI extends javax.swing.JFrame {
    
    private String lastButtonName = null;
    private boolean textFieldActivated = false, buttonActivated = false;
    
    /**
     * Creates new form ConsoleUI
     */
    public ConsoleUI() {
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {
        
        contentPane = new DrawingPanel(); 
        scrollPane = new JScrollPane();
        textArea = new JTextArea(Integer.MAX_VALUE, Integer.MAX_VALUE);
        textField = new JTextField();
        buttons = new JButton[4];

        setContentPane(contentPane);
        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setTitle("Atarii Console");
        
        textArea.setFont(new Font("Consolas", 0, 13)); // NOI18N
        textArea.setEditable(false);
        scrollPane.setViewportView(textArea);

        textField.setFont(new Font("Consolas", 0, 12)); // NOI18N
        textField.setPreferredSize(new Dimension(430, 25));
        textField.addActionListener(this::textFieldActivated);
        textField.addActionListener((ActionEvent e) -> textFieldActivated = true);

        for(int i = 0;i<buttons.length;i++) {
            buttons[i] = new JButton();
            buttons[i].setFont(new Font("Consolas", 0, 12)); // NOI18N
            buttons[i].setText("button" + i);
            buttons[i].addActionListener(this::buttonPressed);
            buttons[i].setVisible(false);
        }
        
        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        
        GroupLayout.SequentialGroup sGroup = layout.createSequentialGroup();
        for(int i = 0;i<buttons.length;i++) {
            sGroup.addComponent(buttons[i], GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE);
            if(i != buttons.length-1) {
                sGroup.addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED);
            } else {
                sGroup.addGap(0, 0, Short.MAX_VALUE);
            }
        }
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(scrollPane)
                    .addComponent(textField, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(sGroup))
                .addContainerGap())
        );
        
        GroupLayout.ParallelGroup pGroup = layout.createParallelGroup(GroupLayout.Alignment.BASELINE);
        for (JButton button:buttons) {
            pGroup.addComponent(button, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE);
        }
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrollPane, GroupLayout.PREFERRED_SIZE, 295, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(textField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pGroup)
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>
    
    private void buttonPressed(ActionEvent ae) {
        lastButtonName = ((JButton)(ae.getSource())).getText();
        buttonActivated = true;
    }
    
    private void textFieldActivated(ActionEvent ae) {
        textFieldActivated = true;
        while(textFieldActivated) {
            try {
                Thread.sleep(250);
            } catch (InterruptedException ex) {
                Atarii.showException(ex);
            }
        }
        ((JTextField)(ae.getSource())).setText("");
    }
    
    public String getLastButtonPress() {
        return lastButtonName;
    }
    
    public String getNextButtonPress() {
        while(!buttonActivated) {
            try {
                Thread.sleep(250);
            } catch (InterruptedException ex) {
                Atarii.showException(ex);
            }
        }
        buttonActivated = false;
        return lastButtonName;
    }
    
    public String getTextFieldText() {
        while (!textFieldActivated) {            
            try {
                Thread.sleep(250);
            } catch (InterruptedException ex) {
                Atarii.showException(ex);
            }
        }
        textFieldActivated = false;
        return textField.getText();
    }
    
    public void println(String s) {
        textArea.setText(textArea.getText()+s+"\n");
    }
    
    public void println() {
        textArea.setText(textArea.getText()+"\n");
    }
    
    public void print(String s) {
        textArea.setText(textArea.getText()+s);
    }
    
    public void clear() {
        textArea.setText("");
    }
    
    public void displayTextField() {
        for(JButton button:buttons) {
            button.setVisible(false);
        }
        textField.setVisible(true);
    }
    
    public void displayButtons(String[] ss) {
        textField.setVisible(false);
        for(int i = 0;i<buttons.length;i++) {
            if(i >= ss.length) buttons[i].setVisible(false);
            else {
                buttons[i].setText(ss[i]);
                buttons[i].setVisible(true);
            }
        }
    }
    
    public void displayNothing() {
        for(JButton button:buttons) {
            button.setVisible(false);
        }
        textField.setVisible(false);
    }
    
    public static ConsoleUI run() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            UIManager.LookAndFeelInfo[] installedLookAndFeels=UIManager.getInstalledLookAndFeels();
            for (UIManager.LookAndFeelInfo installedLookAndFeel : installedLookAndFeels) {
                if ("Nimbus".equals(installedLookAndFeel.getName())) {
                   UIManager.setLookAndFeel(installedLookAndFeel.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            Atarii.showException(ex);
        }
        //</editor-fold>

        /* Create and display the form */
        ConsoleUI consoleUI = new ConsoleUI();
        EventQueue.invokeLater(() -> {
            consoleUI.setResizable(false);
            consoleUI.setVisible(true);
        });
        return consoleUI;
    }
    
    //<editor-fold defaultstate="collapsed" desc="Variables">
    private JButton[] buttons;
    private JScrollPane scrollPane;
    private JTextArea textArea;
    private JTextField textField;
    private DrawingPanel contentPane;
    //</editor-fold>
    
    class DrawingPanel extends JPanel {
        private int x;
        private int y;
        private String[] commands = {
                                        "UP",
                                        "DOWN",
                                        "LEFT",
                                        "RIGHT"
                                    };                      

        private ActionListener panelAction = new ActionListener() {   
            @Override
            public void actionPerformed(ActionEvent ae) {
                String command = (String) ae.getActionCommand();
                if (command.equals(commands[0]))
                    y += 1;             
                else if (command.equals(commands[1]))
                    y -= 1;
                else if (command.equals(commands[2]))
                    x -= 1;
                else if (command.equals(commands[3]))
                    x += 1;

                repaint();  
            }
        };

        public DrawingPanel() {
            x = 0;
            y = 0;

            for (String command : commands) {
                super.registerKeyboardAction(panelAction, command, KeyStroke.getKeyStroke(command), JComponent.WHEN_IN_FOCUSED_WINDOW);
            }
        }

        @Override
        public void paintComponent(Graphics g) {
            super.paintComponent(g);
            String displayText = "X : " + x + " and Y : " + y;
            System.out.println(displayText);
            g.drawString(displayText, x, y);
        }
    }
}